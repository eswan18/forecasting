services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin_pw
      POSTGRES_DB: forecasting
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d forecasting"]
      interval: 3s
      timeout: 4s
      retries: 5
    ports:
      - 2345:5432

  cloner:
    image: postgres:17
    environment:
      POSTGRES_USER: abc
      POSTGRES_PASSWORD: def
      POSTGRES_DB: nonsense
      LOCAL_DB_URI: "postgresql://admin:admin_pw@host.docker.internal:2345/forecasting"
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
        pg_dump --no-owner --no-acl $DATABASE_URL | psql 'postgresql://admin:admin_pw@host.docker.internal:2345/forecasting' &&
        psql 'postgresql://admin:admin_pw@host.docker.internal:2345/forecasting' -c \"
          CREATE ROLE app_user WITH LOGIN PASSWORD 'app_user_pw';
          GRANT USAGE ON SCHEMA public TO app_user;
          GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_user;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
          GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO app_user;
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO app_user;
        \"
      "
